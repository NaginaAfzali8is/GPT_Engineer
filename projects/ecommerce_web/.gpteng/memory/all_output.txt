To create a simple e-commerce website for displaying clothes with an "Add to Cart" button, we will use Flask, a lightweight web framework in Python. We will have two main pages: one for listing products and another for the shopping cart. We will also need a backend to handle the logic.

Here are the core components we will need:

1. `app.py`: The entry point of the Flask application.
2. `product.py`: A class representing a product.
3. `cart.py`: A class representing the shopping cart.
4. `templates/`: A directory to hold HTML templates for rendering pages.
   - `index.html`: The product listing page.
   - `cart.html`: The shopping cart page.
5. `static/`: A directory to hold static files like CSS and JavaScript.
   - `styles.css`: The CSS file for styling the website.
   - `script.js`: The JavaScript file for handling "Add to Cart" actions.
6. `requirements.txt`: A file listing the Python package dependencies.

Let's start with the entry point of the application:

app.py
```python
from flask import Flask, render_template, request, redirect, url_for, session
from product import Product
from cart import Cart

app = Flask(__name__)
app.secret_key = 'super secret key'

# In-memory storage for products
products = [
    Product(1, 'T-Shirt', 'Comfortable cotton t-shirt', 19.99),
    Product(2, 'Jeans', 'Stylish blue jeans', 49.99),
    Product(3, 'Jacket', 'Warm and cozy jacket', 89.99)
]

@app.route('/')
def index():
    return render_template('index.html', products=products)

@app.route('/add_to_cart/<int:product_id>')
def add_to_cart(product_id):
    product = next((p for p in products if p.id == product_id), None)
    if not product:
        return redirect(url_for('index'))
    
    if 'cart' not in session:
        session['cart'] = Cart().to_dict()
    
    cart = Cart.from_dict(session['cart'])
    cart.add_product(product)
    session['cart'] = cart.to_dict()
    
    return redirect(url_for('index'))

@app.route('/cart')
def cart():
    if 'cart' not in session:
        session['cart'] = Cart().to_dict()
    
    cart = Cart.from_dict(session['cart'])
    return render_template('cart.html', cart=cart)

if __name__ == '__main__':
    app.run(debug=True)
```

Now, let's define the `Product` class:

product.py
```python
class Product:
    def __init__(self, id, name, description, price):
        self.id = id
        self.name = name
        self.description = description
        self.price = price
```

Next, we'll define the `Cart` class:

cart.py
```python
class Cart:
    def __init__(self):
        self.products = []
    
    def add_product(self, product):
        self.products.append(product)
    
    def to_dict(self):
        return {'products': [vars(p) for p in self.products]}
    
    @staticmethod
    def from_dict(cart_dict):
        cart = Cart()
        cart.products = [Product(**p) for p in cart_dict.get('products', [])]
        return cart
```

Now, let's create the HTML templates:

templates/index.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Clothes Store</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
    <h1>Clothes Store</h1>
    <div class="product-list">
        {% for product in products %}
        <div class="product">
            <h2>{{ product.name }}</h2>
            <p>{{ product.description }}</p>
            <p>${{ product.price }}</p>
            <a href="{{ url_for('add_to_cart', product_id=product.id) }}">Add to Cart</a>
        </div>
        {% endfor %}
    </div>
    <a href="{{ url_for('cart') }}">Go to Cart</a>
</body>
</html>
```

templates/cart.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Your Cart</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
    <h1>Your Shopping Cart</h1>
    <div class="product-list">
        {% for product in cart.products %}
        <div class="product">
            <h2>{{ product.name }}</h2>
            <p>{{ product.description }}</p>
            <p>${{ product.price }}</p>
        </div>
        {% else %}
        <p>Your cart is empty.</p>
        {% endfor %}
    </div>
    <a href="{{ url_for('index') }}">Continue Shopping</a>
</body>
</html>
```

We'll add some basic styling:

static/styles.css
```css
body {
    font-family: Arial, sans-serif;
}

.product-list {
    display: flex;
    flex-wrap: wrap;
}

.product {
    border: 1px solid #ddd;
    padding: 10px;
    margin: 10px;
    width: 200px;
}

a {
    text-decoration: none;
    color: blue;
}

a:hover {
    text-decoration: underline;
}
```

Lastly, we need to create the `requirements.txt` file to list our dependencies:

requirements.txt
```
Flask==2.0.2
```

This concludes a fully working implementation.