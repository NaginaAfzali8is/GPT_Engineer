To create a Snake game in Python, we will need the following core classes and functions:

- `Game`: The main class to encapsulate game logic.
- `Snake`: A class to represent the snake.
- `Food`: A class to represent the food.
- `GameBoard`: A class to represent the game board.
- `Point`: A class or data structure to represent coordinates on the board.
- `main`: The entry point function to start the game.
- `constants`: A module to hold constant values like board size, directions, etc.
- `utils`: A module for utility functions, if needed.

We will use the `pygame` library for creating the game window and handling events. Let's start by setting up the project structure and writing the code for each component.

First, we will create a `requirements.txt` file to list our dependencies:

requirements.txt
```
pygame==2.1.2
```

Now, let's start with the entry point of our application:

main.py
```python
import pygame
from game import Game

def main():
    # Initialize pygame
    pygame.init()

    # Create the game instance
    game = Game()

    # Start the game loop
    game.run()

    # Quit pygame
    pygame.quit()

if __name__ == "__main__":
    main()
```

Next, we will define the `Game` class:

game.py
```python
import pygame
from snake import Snake
from food import Food
from gameboard import GameBoard
from constants import SCREEN_SIZE, FPS

class Game:
    def __init__(self):
        self.screen = pygame.display.set_mode(SCREEN_SIZE)
        pygame.display.set_caption('Snake Game')
        self.clock = pygame.time.Clock()
        self.game_board = GameBoard()
        self.snake = Snake(self.game_board)
        self.food = Food(self.game_board)
        self.running = True

    def run(self):
        while self.running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    self.running = False
                elif event.type == pygame.KEYDOWN:
                    self.snake.change_direction(event.key)

            self.snake.move()
            if self.snake.head == self.food.position:
                self.snake.grow()
                self.food.spawn()

            if self.snake.has_collided():
                self.running = False

            self.game_board.draw(self.screen, self.snake, self.food)
            pygame.display.flip()
            self.clock.tick(FPS)
```

Now, let's define the `Snake` class:

snake.py
```python
import pygame
from constants import DIRECTIONS, BLOCK_SIZE
from point import Point

class Snake:
    def __init__(self, game_board):
        self.body = [Point(game_board.width // 2, game_board.height // 2)]
        self.direction = pygame.K_RIGHT
        self.growing = False

    @property
    def head(self):
        return self.body[0]

    def change_direction(self, key):
        if key in DIRECTIONS and DIRECTIONS[key] != (-DIRECTIONS[self.direction][0], -DIRECTIONS[self.direction][1]):
            self.direction = key

    def move(self):
        x, y = self.head.x, self.head.y
        dx, dy = DIRECTIONS[self.direction]
        new_head = Point(x + dx, y + dy)
        self.body.insert(0, new_head)
        if not self.growing:
            self.body.pop()
        self.growing = False

    def grow(self):
        self.growing = True

    def has_collided(self):
        return self.head in self.body[1:]

    def draw(self, surface):
        for block in self.body:
            rect = pygame.Rect(block.x * BLOCK_SIZE, block.y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE)
            pygame.draw.rect(surface, (0, 255, 0), rect)
```

Next, the `Food` class:

food.py
```python
import pygame
import random
from constants import BLOCK_SIZE
from point import Point

class Food:
    def __init__(self, game_board):
        self.position = Point(0, 0)
        self.game_board = game_board
        self.spawn()

    def spawn(self):
        self.position = Point(random.randint(0, self.game_board.width - 1), random.randint(0, self.game_board.height - 1))

    def draw(self, surface):
        rect = pygame.Rect(self.position.x * BLOCK_SIZE, self.position.y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE)
        pygame.draw.rect(surface, (255, 0, 0), rect)
```

The `GameBoard` class:

gameboard.py
```python
import pygame
from constants import SCREEN_SIZE, BLOCK_SIZE

class GameBoard:
    def __init__(self):
        self.width, self.height = SCREEN_SIZE[0] // BLOCK_SIZE, SCREEN_SIZE[1] // BLOCK_SIZE

    def draw(self, surface, snake, food):
        surface.fill((0, 0, 0))
        snake.draw(surface)
        food.draw(surface)
```

The `Point` class or data structure:

point.py
```python
from dataclasses import dataclass

@dataclass
class Point:
    x: int
    y: int
```

Constants module:

constants.py
```python
SCREEN_SIZE = (640, 480)
FPS = 10
BLOCK_SIZE = 20

DIRECTIONS = {
    pygame.K_UP: (0, -1),
    pygame.K_DOWN: (0, 1),
    pygame.K_LEFT: (-1, 0),
    pygame.K_RIGHT: (1, 0),
}
```

This concludes a fully working implementation.