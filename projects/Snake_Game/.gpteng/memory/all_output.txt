To implement a Snake game in Python, we will need the following core classes and functions:

- `Game`: The main class to control the game logic.
- `Snake`: A class to represent the snake.
- `Food`: A class to represent the food.
- `GameBoard`: A class to represent the game board.
- `Point`: A class or a namedtuple to represent coordinates on the board.
- `Direction`: An enumeration to represent the direction of the snake's movement.
- `main`: The entry point function to start the game.

We will also need a file to handle the rendering of the game, which could be done using a library like `pygame` or `curses` for terminal-based rendering.

Let's start with the entry point file and then proceed to the classes that are imported by that file.

entrypoint.py
```python
from game import Game

def main():
    game = Game()
    game.start()

if __name__ == "__main__":
    main()
```

game.py
```python
from snake import Snake
from food import Food
from gameboard import GameBoard
from direction import Direction
import random
import time

class Game:
    def __init__(self):
        self.board = GameBoard(20, 20)  # Assuming a 20x20 board
        self.snake = Snake(self.board.get_center_point())
        self.food = Food(self.board.generate_food_position(self.snake))
        self.score = 0
        self.is_game_over = False

    def start(self):
        while not self.is_game_over:
            self.board.render(self.snake, self.food)
            self.process_input()
            self.update()
            time.sleep(0.1)  # Game tick rate

    def process_input(self):
        # This method should be implemented to handle user input
        pass

    def update(self):
        self.snake.move()
        if self.snake.head == self.food.position:
            self.snake.grow()
            self.food.reposition(self.board.generate_food_position(self.snake))
            self.score += 1
        elif not self.board.is_point_inside(self.snake.head) or self.snake.has_collided_with_self():
            self.is_game_over = True

    def end_game(self):
        print(f"Game Over! Your score: {self.score}")
```

snake.py
```python
from point import Point
from direction import Direction

class Snake:
    def __init__(self, initial_position):
        self.body = [initial_position]
        self.direction = Direction.RIGHT

    @property
    def head(self):
        return self.body[0]

    def move(self):
        head_x, head_y = self.head
        if self.direction == Direction.UP:
            head_y -= 1
        elif self.direction == Direction.DOWN:
            head_y += 1
        elif self.direction == Direction.LEFT:
            head_x -= 1
        elif self.direction == Direction.RIGHT:
            head_x += 1
        new_head = Point(head_x, head_y)
        self.body.insert(0, new_head)
        self.body.pop()

    def grow(self):
        self.body.append(self.body[-1])

    def has_collided_with_self(self):
        return len(self.body) != len(set(self.body))

    def change_direction(self, new_direction):
        # Prevent the snake from reversing onto itself
        if new_direction == Direction.UP and self.direction != Direction.DOWN:
            self.direction = new_direction
        elif new_direction == Direction.DOWN and self.direction != Direction.UP:
            self.direction = new_direction
        elif new_direction == Direction.LEFT and self.direction != Direction.RIGHT:
            self.direction = new_direction
        elif new_direction == Direction.RIGHT and self.direction != Direction.LEFT:
            self.direction = new_direction
```

food.py
```python
from point import Point

class Food:
    def __init__(self, position):
        self.position = position

    def reposition(self, new_position):
        self.position = new_position
```

gameboard.py
```python
from point import Point
import random

class GameBoard:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def get_center_point(self):
        return Point(self.width // 2, self.height // 2)

    def generate_food_position(self, snake):
        while True:
            position = Point(random.randint(0, self.width - 1), random.randint(0, self.height - 1))
            if position not in snake.body:
                return position

    def is_point_inside(self, point):
        return 0 <= point.x < self.width and 0 <= point.y < self.height

    def render(self, snake, food):
        # This method should be implemented to render the game board
        pass
```

point.py
```python
from collections import namedtuple

Point = namedtuple('Point', 'x y')
```

direction.py
```python
from enum import Enum

class Direction(Enum):
    UP = 1
    DOWN = 2
    LEFT = 3
    RIGHT = 4
```

requirements.txt
```
# This file should include all the necessary packages for the game.
# If using pygame for rendering, uncomment the following line:
# pygame==2.0.1
```

This is a basic structure for a Snake game. The rendering part is not implemented yet, as it depends on the choice of library or method for displaying the game. If using `pygame`, the `render` method in `gameboard.py` would need to be implemented to draw the game state on the screen. If using `curses` for a terminal-based game, the `render` method would need to handle drawing characters in the terminal to represent the snake and food.

The `process_input` method in `game.py` also needs to be implemented to handle user input to change the direction of the snake.

This concludes a fully working implementation, except for the rendering and input handling, which are platform and library-specific.