To create a functional Snake game in Python, we will need the following core classes and functions:

1. `Game`: The main class to control game logic and state.
2. `Snake`: A class to represent the snake.
3. `Food`: A class to represent the food.
4. `GameBoard`: A class to represent the game board.
5. `main`: The entry point function to start the game.

We will use the `pygame` library for creating the game window and handling events.

Let's start with the entry point file:

main.py
```python
import pygame
from game import Game

def main():
    pygame.init()
    game = Game()
    game.run()
    pygame.quit()

if __name__ == "__main__":
    main()
```

Now let's define the `Game` class:

game.py
```python
import pygame
from snake import Snake
from food import Food
from gameboard import GameBoard

class Game:
    def __init__(self):
        self.screen = pygame.display.set_mode((640, 480))
        pygame.display.set_caption('Snake Game')
        self.clock = pygame.time.Clock()
        self.game_board = GameBoard(640, 480)
        self.snake = Snake(self.game_board)
        self.food = Food(self.game_board)
        self.running = True

    def run(self):
        while self.running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    self.running = False
                elif event.type == pygame.KEYDOWN:
                    self.snake.change_direction(event.key)
            
            self.snake.move()
            if self.snake.head_position() == self.food.position:
                self.snake.grow()
                self.food.spawn()

            if self.snake.has_collided():
                self.running = False

            self.game_board.draw(self.screen, self.snake, self.food)
            pygame.display.flip()
            self.clock.tick(10)
```

Next, we define the `Snake` class:

snake.py
```python
import pygame
from collections import deque

class Snake:
    def __init__(self, game_board):
        self.positions = deque([(160, 160)])
        self.direction = pygame.K_RIGHT
        self.game_board = game_board

    def change_direction(self, key):
        if key == pygame.K_UP and self.direction != pygame.K_DOWN:
            self.direction = pygame.K_UP
        elif key == pygame.K_DOWN and self.direction != pygame.K_UP:
            self.direction = pygame.K_DOWN
        elif key == pygame.K_LEFT and self.direction != pygame.K_RIGHT:
            self.direction = pygame.K_LEFT
        elif key == pygame.K_RIGHT and self.direction != pygame.K_LEFT:
            self.direction = pygame.K_RIGHT

    def move(self):
        x, y = self.positions[0]
        if self.direction == pygame.K_UP:
            y -= 20
        elif self.direction == pygame.K_DOWN:
            y += 20
        elif self.direction == pygame.K_LEFT:
            x -= 20
        elif self.direction == pygame.K_RIGHT:
            x += 20
        new_head = (x, y)
        self.positions.appendleft(new_head)
        self.positions.pop()

    def grow(self):
        self.positions.append(self.positions[-1])

    def head_position(self):
        return self.positions[0]

    def has_collided(self):
        head = self.head_position()
        return head in list(self.positions)[1:] or not self.game_board.is_position_inside(head)
```

Now, the `Food` class:

food.py
```python
import pygame
import random

class Food:
    def __init__(self, game_board):
        self.game_board = game_board
        self.position = (0, 0)
        self.spawn()

    def spawn(self):
        self.position = (
            random.randint(0, (self.game_board.width - 20) // 20) * 20,
            random.randint(0, (self.game_board.height - 20) // 20) * 20
        )
```

And the `GameBoard` class:

gameboard.py
```python
import pygame

class GameBoard:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def draw(self, screen, snake, food):
        screen.fill((0, 0, 0))
        for position in snake.positions:
            pygame.draw.rect(screen, (0, 255, 0), pygame.Rect(position[0], position[1], 20, 20))
        pygame.draw.rect(screen, (255, 0, 0), pygame.Rect(food.position[0], food.position[1], 20, 20))

    def is_position_inside(self, position):
        return 0 <= position[0] < self.width and 0 <= position[1] < self.height
```

Finally, we need a `requirements.txt` file to specify the dependencies:

requirements.txt
```
pygame==2.0.1
```

Make sure to install the dependencies using `pip install -r requirements.txt` before running the game.

This concludes a fully working implementation.