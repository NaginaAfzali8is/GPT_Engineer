To implement a Snake game in Python, we will need the following core classes and functions:

- `Game`: The main class to control the game loop and state.
- `Snake`: To represent the snake and handle its movement.
- `Food`: To represent the food that the snake can eat.
- `GameBoard`: To represent the game board and check for collisions.
- `Point`: A utility class to represent x, y coordinates on the board.
- `Direction`: An enumeration to represent the direction of the snake's movement.
- `main`: The entry point function to start the game.

We will also need a requirements.txt file to specify the dependencies for the project.

Let's start by creating the entry point file and then proceed to the other files.

entrypoint.py
```python
from game import Game

def main():
    game = Game()
    game.run()

if __name__ == "__main__":
    main()
```

game.py
```python
from snake import Snake
from food import Food
from gameboard import GameBoard
import curses

class Game:
    def __init__(self):
        self.board = GameBoard(20, 20)
        self.snake = Snake(self.board)
        self.food = Food(self.board)
        self.score = 0

    def run(self):
        curses.wrapper(self.main_loop)

    def main_loop(self, stdscr):
        curses.curs_set(0)  # Hide the cursor
        stdscr.nodelay(1)  # Make getch non-blocking
        stdscr.timeout(100)  # Refresh screen every 100ms

        while True:
            self.board.draw(stdscr, self.snake, self.food)
            key = stdscr.getch()
            self.snake.handle_key(key)
            if not self.snake.move(self.food):
                break  # Game over if the snake can't move
            self.score = len(self.snake.body) - 1
            stdscr.addstr(0, 0, f'Score: {self.score}')
```

snake.py
```python
from point import Point
from direction import Direction
import curses

class Snake:
    def __init__(self, board):
        self.body = [Point(board.width // 2, board.height // 2)]
        self.direction = Direction.RIGHT
        self.grow_to = 0
        self.board = board

    def move(self, food):
        head = self.body[0]
        new_head = head.move(self.direction)

        if new_head in self.body or not self.board.is_inside(new_head):
            return False  # Collision

        self.body.insert(0, new_head)

        if new_head == food.position:
            food.respawn(self)
            self.grow_to += 3
        elif self.grow_to > 0:
            self.grow_to -= 1
        else:
            self.body.pop()

        return True

    def handle_key(self, key):
        if key == curses.KEY_UP and self.direction != Direction.DOWN:
            self.direction = Direction.UP
        elif key == curses.KEY_DOWN and self.direction != Direction.UP:
            self.direction = Direction.DOWN
        elif key == curses.KEY_LEFT and self.direction != Direction.RIGHT:
            self.direction = Direction.LEFT
        elif key == curses.KEY_RIGHT and self.direction != Direction.LEFT:
            self.direction = Direction.RIGHT
```

food.py
```python
from point import Point
import random

class Food:
    def __init__(self, board):
        self.board = board
        self.position = Point(random.randint(0, board.width - 1), random.randint(0, board.height - 1))

    def respawn(self, snake):
        while True:
            self.position = Point(random.randint(0, self.board.width - 1), random.randint(0, self.board.height - 1))
            if self.position not in snake.body:
                break
```

gameboard.py
```python
import curses

class GameBoard:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def is_inside(self, point):
        return 0 <= point.x < self.width and 0 <= point.y < self.height

    def draw(self, stdscr, snake, food):
        stdscr.clear()
        for point in snake.body:
            stdscr.addstr(point.y, point.x * 2, '[]')
        stdscr.addstr(food.position.y, food.position.x * 2, '##')
        stdscr.refresh()
```

point.py
```python
from dataclasses import dataclass

@dataclass
class Point:
    x: int
    y: int

    def move(self, direction):
        if direction == Direction.UP:
            return Point(self.x, self.y - 1)
        elif direction == Direction.DOWN:
            return Point(self.x, self.y + 1)
        elif direction == Direction.LEFT:
            return Point(self.x - 1, self.y)
        elif direction == Direction.RIGHT:
            return Point(self.x + 1, self.y)
```

direction.py
```python
from enum import Enum

class Direction(Enum):
    UP = 1
    DOWN = 2
    LEFT = 3
    RIGHT = 4
```

requirements.txt
```
curses
```

Please note that the `curses` module is part of the Python standard library and does not need to be installed via `pip`. However, if you are using Windows, you might need to install `windows-curses` to enable support for the `curses` module.

This concludes a fully working implementation.