To create a fair calculation system, we need to define what we mean by "fair" and what we are calculating. For the sake of this example, let's assume we are calculating the fair share of a group expense. Each person in the group may have paid different amounts, and we want to calculate how much each person should pay or be reimbursed to ensure everyone has paid an equal share.

We will create a Python application with the following classes and functions:

- `Person`: A class to represent a participant in the expense sharing.
- `Expense`: A class to represent an individual expense.
- `ExpenseGroup`: A class to manage a group of expenses and calculate fair shares.
- `main`: The entry point function that sets up the expense group and participants, adds expenses, and prints out the fair shares.

Let's start with the entry point file:

main.py
```python
from expense_group import ExpenseGroup
from person import Person

def main():
    # Create an expense group
    expense_group = ExpenseGroup()

    # Add participants to the expense group
    alice = Person("Alice")
    bob = Person("Bob")
    charlie = Person("Charlie")

    expense_group.add_person(alice)
    expense_group.add_person(bob)
    expense_group.add_person(charlie)

    # Add expenses
    expense_group.add_expense(alice, 120)  # Alice paid $120
    expense_group.add_expense(bob, 75)     # Bob paid $75
    expense_group.add_expense(charlie, 30) # Charlie paid $30

    # Calculate and print the fair shares
    fair_shares = expense_group.calculate_fair_shares()
    for person, amount in fair_shares.items():
        print(f"{person.name} should {'receive' if amount < 0 else 'pay'} ${abs(amount):.2f}")

if __name__ == "__main__":
    main()
```

Now let's define the `Person` class:

person.py
```python
class Person:
    def __init__(self, name):
        self.name = name
        self.amount_paid = 0

    def add_payment(self, amount):
        self.amount_paid += amount
```

Next, we define the `Expense` class:

expense.py
```python
class Expense:
    def __init__(self, payer, amount):
        self.payer = payer
        self.amount = amount
```

Now, let's define the `ExpenseGroup` class:

expense_group.py
```python
from person import Person
from expense import Expense
from collections import defaultdict

class ExpenseGroup:
    def __init__(self):
        self.persons = []
        self.expenses = []

    def add_person(self, person):
        self.persons.append(person)

    def add_expense(self, payer, amount):
        self.expenses.append(Expense(payer, amount))
        payer.add_payment(amount)

    def calculate_fair_shares(self):
        total_amount = sum(expense.amount for expense in self.expenses)
        fair_share = total_amount / len(self.persons)
        shares = defaultdict(float)

        for person in self.persons:
            shares[person] = person.amount_paid - fair_share

        return shares
```

Lastly, we need a `requirements.txt` file to specify the dependencies, which in this case are none beyond the Python standard library:

requirements.txt
```
# No external dependencies required
```

This concludes a fully working implementation.