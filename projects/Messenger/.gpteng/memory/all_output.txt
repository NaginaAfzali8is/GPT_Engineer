Given the requirements, we will create a message application with a React.js frontend and a Node.js backend. The application will have the following core components:

Frontend (React.js):
- `App`: The main component that renders the user interface.
- `UserList`: Displays the list of users.
- `MessageList`: Displays messages for a selected user.
- `NewMessageForm`: Provides a form to send a new message.

Backend (Node.js):
- `server.js`: The entry point for the Node.js server.
- `UserController`: Handles requests related to users.
- `MessageController`: Handles requests related to messages.
- `UserModel`: Represents the user data.
- `MessageModel`: Represents the message data.

We will start with the backend Node.js server and then move on to the frontend React.js components.

Backend Node.js:

package.json
```
{
  "name": "message_app_backend",
  "version": "1.0.0",
  "description": "Backend for the message application",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.17.1",
    "body-parser": "^1.19.0",
    "cors": "^2.8.5"
  }
}
```

server.js
```javascript
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const port = process.env.PORT || 3001;

app.use(cors());
app.use(bodyParser.json());

// Mock data for users and messages
const users = [
  { id: 1, name: 'Alice' },
  { id: 2, name: 'Bob' },
  // ... other users
];

const messages = [
  { id: 1, senderId: 1, receiverId: 2, content: 'Hello Bob!' },
  { id: 2, senderId: 2, receiverId: 1, content: 'Hi Alice!' },
  // ... other messages
];

// Routes
app.get('/users', (req, res) => {
  res.json(users);
});

app.get('/messages/:userId', (req, res) => {
  const userId = parseInt(req.params.userId);
  const userMessages = messages.filter(message => message.receiverId === userId);
  res.json(userMessages);
});

app.post('/messages', (req, res) => {
  const { senderId, receiverId, content } = req.body;
  const newMessage = {
    id: messages.length + 1,
    senderId,
    receiverId,
    content
  };
  messages.push(newMessage);
  res.status(201).json(newMessage);
});

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});
```

Frontend React.js:

frontend/package.json
```
{
  "name": "message_app_frontend",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "4.0.3",
    "axios": "^0.21.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
```

frontend/src/index.js
```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);
```

frontend/src/App.js
```javascript
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import UserList from './components/UserList';
import MessageList from './components/MessageList';
import NewMessageForm from './components/NewMessageForm';
import './App.css';

function App() {
  const [users, setUsers] = useState([]);
  const [selectedUser, setSelectedUser] = useState(null);
  const [messages, setMessages] = useState([]);

  useEffect(() => {
    axios.get('http://localhost:3001/users')
      .then(response => {
        setUsers(response.data);
      });
  }, []);

  const handleUserClick = userId => {
    setSelectedUser(userId);
    axios.get(`http://localhost:3001/messages/${userId}`)
      .then(response => {
        setMessages(response.data);
      });
  };

  const handleSendMessage = (content) => {
    const message = {
      senderId: 0, // Assuming 0 is the ID of the current user
      receiverId: selectedUser,
      content
    };
    axios.post('http://localhost:3001/messages', message)
      .then(response => {
        setMessages([...messages, response.data]);
      });
  };

  return (
    <div className="App">
      <UserList users={users} onUserClick={handleUserClick} />
      {selectedUser && <MessageList messages={messages} />}
      {selectedUser && <NewMessageForm onSendMessage={handleSendMessage} />}
    </div>
  );
}

export default App;
```

frontend/src/components/UserList.js
```javascript
import React from 'react';

function UserList({ users, onUserClick }) {
  return (
    <div className="UserList">
      <h2>Users</h2>
      <ul>
        {users.map(user => (
          <li key={user.id} onClick={() => onUserClick(user.id)}>
            {user.name}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default UserList;
```

frontend/src/components/MessageList.js
```javascript
import React from 'react';

function MessageList({ messages }) {
  return (
    <div className="MessageList">
      <h2>Messages</h2>
      <ul>
        {messages.map(message => (
          <li key={message.id}>
            {message.content}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default MessageList;
```

frontend/src/components/NewMessageForm.js
```javascript
import React, { useState } from 'react';

function NewMessageForm({ onSendMessage }) {
  const [content, setContent] = useState('');

  const handleSubmit = (event) => {
    event.preventDefault();
    onSendMessage(content);
    setContent('');
  };

  return (
    <form className="NewMessageForm" onSubmit={handleSubmit}>
      <textarea
        value={content}
        onChange={e => setContent(e.target.value)}
        placeholder="Write a message..."
      />
      <button type="submit">Send</button>
    </form>
  );
}

export default NewMessageForm;
```

frontend/src/App.css
```css
.App {
  text-align: center;
}

.UserList {
  margin: 20px;
  padding: 10px;
  border: 1px solid #ccc;
}

.MessageList {
  margin: 20px;
  padding: 10px;
  border: 1px solid #ccc;
}

.NewMessageForm textarea {
  width: 100%;
  height: 100px;
}

.NewMessageForm button {
  margin-top: 10px;
}
```

frontend/src/index.css
```css
body {
  margin: 0;
  padding: 0;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",
    "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",
    monospace;
}
```

This concludes a fully working implementation.