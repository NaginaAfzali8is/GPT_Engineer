To create a train booking web application, we will use Python with Flask as the web framework. The application will consist of several components, including models for representing trains and bookings, views for handling HTTP requests, and templates for rendering HTML pages. We will also need a database to store the data, for which we will use SQLite with SQLAlchemy as the ORM.

Here is the list of core classes, functions, and methods that will be necessary:

- `app.py`: The entry point of the Flask application.
- `models.py`: Contains the SQLAlchemy models for `Train` and `Booking`.
- `views.py`: Contains the Flask view functions for different routes.
- `forms.py`: Contains the WTForms form classes for handling form submissions.
- `templates/`: A directory containing HTML templates for rendering views.
- `config.py`: Contains configuration settings for the Flask application.
- `requirements.txt`: Lists the Python package dependencies for the application.

Let's start with the entry point of the application:

entrypoint/app.py
```python
from flask import Flask
from models import db
from views import main_blueprint

def create_app():
    app = Flask(__name__)
    app.config.from_object('config.Config')
    db.init_app(app)
    
    with app.app_context():
        db.create_all()  # Create database tables
    
    app.register_blueprint(main_blueprint)
    
    return app

if __name__ == '__main__':
    app = create_app()
    app.run(debug=True)
```

Now, let's define the configuration settings:

entrypoint/config.py
```python
import os

class Config:
    SQLALCHEMY_DATABASE_URI = 'sqlite:///train_booking.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    SECRET_KEY = os.urandom(24)
```

Next, we'll define the models:

entrypoint/models.py
```python
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Train(db.Model):
    __tablename__ = 'trains'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(64), nullable=False)
    capacity = db.Column(db.Integer, nullable=False)
    bookings = db.relationship('Booking', backref='train', lazy=True)
    
    def __repr__(self):
        return f'<Train {self.name}>'

class Booking(db.Model):
    __tablename__ = 'bookings'
    
    id = db.Column(db.Integer, primary_key=True)
    passenger_name = db.Column(db.String(64), nullable=False)
    train_id = db.Column(db.Integer, db.ForeignKey('trains.id'), nullable=False)
    
    def __repr__(self):
        return f'<Booking {self.passenger_name} on {self.train.name}>'
```

We'll need a form to handle bookings:

entrypoint/forms.py
```python
from flask_wtf import FlaskForm
from wtforms import StringField, SelectField, SubmitField
from wtforms.validators import DataRequired
from models import Train

class BookingForm(FlaskForm):
    passenger_name = StringField('Passenger Name', validators=[DataRequired()])
    train = SelectField('Train', coerce=int, validators=[DataRequired()])
    submit = SubmitField('Book')

    def __init__(self, *args, **kwargs):
        super(BookingForm, self).__init__(*args, **kwargs)
        self.train.choices = [(train.id, train.name) for train in Train.query.all()]
```

Now, let's define the views:

entrypoint/views.py
```python
from flask import Blueprint, render_template, request, redirect, url_for
from models import db, Train, Booking
from forms import BookingForm

main_blueprint = Blueprint('main', __name__)

@main_blueprint.route('/')
def index():
    trains = Train.query.all()
    return render_template('index.html', trains=trains)

@main_blueprint.route('/book', methods=['GET', 'POST'])
def book():
    form = BookingForm()
    if form.validate_on_submit():
        booking = Booking(passenger_name=form.passenger_name.data, train_id=form.train.data)
        db.session.add(booking)
        db.session.commit()
        return redirect(url_for('main.index'))
    return render_template('book.html', form=form)
```

We will also need some HTML templates for rendering the views. Let's create a simple base template and templates for the index and booking pages:

entrypoint/templates/base.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Train Booking</title>
</head>
<body>
    <header>
        <h1>Train Booking Application</h1>
    </header>
    <main>
        {% block content %}{% endblock %}
    </main>
</body>
</html>
```

entrypoint/templates/index.html
```html
{% extends 'base.html' %}

{% block content %}
    <h2>Available Trains</h2>
    <ul>
        {% for train in trains %}
            <li>{{ train.name }} - Capacity: {{ train.capacity }}</li>
        {% endfor %}
    </ul>
    <a href="{{ url_for('main.book') }}">Book a seat</a>
{% endblock %}
```

entrypoint/templates/book.html
```html
{% extends 'base.html' %}

{% block content %}
    <h2>Book a seat</h2>
    <form method="post">
        {{ form.hidden_tag() }}
        <p>
            {{ form.passenger_name.label }}<br>
            {{ form.passenger_name(size=20) }}
        </p>
        <p>
            {{ form.train.label }}<br>
            {{ form.train() }}
        </p>
        <p>{{ form.submit() }}</p>
    </form>
{% endblock %}
```

Finally, we need to create the `requirements.txt` file to list all the Python package dependencies:

requirements.txt
```
Flask==2.0.2
Flask-SQLAlchemy==2.5.1
Flask-WTF==0.15.1
WTForms==3.0.0
```

This concludes a fully working implementation.