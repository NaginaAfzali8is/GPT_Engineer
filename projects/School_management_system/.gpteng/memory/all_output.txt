To create a school management system that handles teacher attendance and student records using MongoDB in Python, we will need to define several core classes and functions. Here's an outline of the components we'll need:

1. `Student` class - Represents a student with attributes like name, age, and class.
2. `Teacher` class - Represents a teacher with attributes like name, subject, and attendance record.
3. `Database` class - Handles the connection to the MongoDB database and provides methods for CRUD operations.
4. `SchoolManagementSystem` class - The main class that uses the `Database` class to manage students and teachers.
5. `main.py` - The entry point of the application that sets up the system and provides a CLI or web interface.

Let's start with the `requirements.txt` to define our Python dependencies:

requirements.txt
```
pymongo==3.12.0
Flask==2.0.1
```

Now, let's create the MongoDB models and the database handler:

models/student.py
```python
from dataclasses import dataclass

@dataclass
class Student:
    name: str
    age: int
    grade: str
    student_id: str = None  # Will be assigned by MongoDB as _id
```

models/teacher.py
```python
from dataclasses import dataclass

@dataclass
class Teacher:
    name: str
    subject: str
    attendance: list
    teacher_id: str = None  # Will be assigned by MongoDB as _id
```

database.py
```python
from pymongo import MongoClient
from models.student import Student
from models.teacher import Teacher

class Database:
    def __init__(self, uri, dbname):
        self.client = MongoClient(uri)
        self.db = self.client[dbname]
        self.students = self.db.students
        self.teachers = self.db.teachers

    def add_student(self, student: Student):
        return self.students.insert_one(student.__dict__).inserted_id

    def get_student(self, student_id):
        return self.students.find_one({"_id": student_id})

    def add_teacher(self, teacher: Teacher):
        return self.teachers.insert_one(teacher.__dict__).inserted_id

    def get_teacher(self, teacher_id):
        return self.teachers.find_one({"_id": teacher_id})

    def record_teacher_attendance(self, teacher_id, date):
        return self.teachers.update_one({"_id": teacher_id}, {"$push": {"attendance": date}})
```

Next, we'll create the main school management system class:

school_management_system.py
```python
from database import Database
from models.student import Student
from models.teacher import Teacher

class SchoolManagementSystem:
    def __init__(self, db_uri, db_name):
        self.db = Database(db_uri, db_name)

    def add_new_student(self, name, age, grade):
        student = Student(name=name, age=age, grade=grade)
        return self.db.add_student(student)

    def get_student_info(self, student_id):
        return self.db.get_student(student_id)

    def add_new_teacher(self, name, subject):
        teacher = Teacher(name=name, subject=subject, attendance=[])
        return self.db.add_teacher(teacher)

    def get_teacher_info(self, teacher_id):
        return self.db.get_teacher(teacher_id)

    def mark_teacher_attendance(self, teacher_id, date):
        return self.db.record_teacher_attendance(teacher_id, date)
```

Finally, we'll create the entry point of the application, which will set up the Flask web server:

main.py
```python
from flask import Flask, jsonify, request
from school_management_system import SchoolManagementSystem

app = Flask(__name__)
sms = SchoolManagementSystem('mongodb://localhost:27017/', 'school_management')

@app.route('/student', methods=['POST'])
def add_student():
    data = request.json
    student_id = sms.add_new_student(data['name'], data['age'], data['grade'])
    return jsonify({"student_id": str(student_id)}), 201

@app.route('/student/<student_id>', methods=['GET'])
def get_student(student_id):
    student = sms.get_student_info(student_id)
    return jsonify(student), 200

@app.route('/teacher', methods=['POST'])
def add_teacher():
    data = request.json
    teacher_id = sms.add_new_teacher(data['name'], data['subject'])
    return jsonify({"teacher_id": str(teacher_id)}), 201

@app.route('/teacher/<teacher_id>', methods=['GET'])
def get_teacher(teacher_id):
    teacher = sms.get_teacher_info(teacher_id)
    return jsonify(teacher), 200

@app.route('/teacher/<teacher_id>/attendance', methods=['POST'])
def mark_attendance(teacher_id):
    data = request.json
    sms.mark_teacher_attendance(teacher_id, data['date'])
    return jsonify({"message": "Attendance recorded"}), 200

if __name__ == '__main__':
    app.run(debug=True)
```

This concludes a fully working implementation.