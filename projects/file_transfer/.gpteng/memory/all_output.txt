To create a simple file transfer system in Python, we will need the following core classes and functions:

1. `FileSender` class: Handles the sending of files to a remote location.
2. `FileReceiver` class: Handles the receiving of files from a remote location.
3. `main.py`: The entry point of the application that will use `FileSender` and `FileReceiver` to transfer files.
4. `requirements.txt`: Lists the Python package dependencies for the project.

Let's start with the `main.py` file, which will be the entry point of our application.

main.py
```python
from file_sender import FileSender
from file_receiver import FileReceiver

def main():
    # Example usage of FileSender and FileReceiver
    sender = FileSender('localhost', 5001)
    receiver = FileReceiver('localhost', 5001)

    # Start the receiver to listen for incoming files
    receiver.start()

    # Send a file
    sender.send_file('example.txt', 'localhost', 5001)

if __name__ == '__main__':
    main()
```

Now, let's define the `FileSender` class in its own file.

file_sender.py
```python
import socket
import os

class FileSender:
    def __init__(self, host, port):
        self.host = host
        self.port = port

    def send_file(self, file_path, remote_host, remote_port):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect((remote_host, remote_port))
            with open(file_path, 'rb') as f:
                s.sendall(f.read())
            print(f"File {file_path} sent to {remote_host}:{remote_port}")
```

Next, we'll define the `FileReceiver` class in its own file.

file_receiver.py
```python
import socket
import threading

class FileReceiver:
    def __init__(self, host, port, buffer_size=1024):
        self.host = host
        self.port = port
        self.buffer_size = buffer_size

    def start(self):
        thread = threading.Thread(target=self._receive_file)
        thread.start()

    def _receive_file(self):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind((self.host, self.port))
            s.listen()
            conn, addr = s.accept()
            with conn:
                print(f"Connected by {addr}")
                with open('received_file', 'wb') as f:
                    while True:
                        data = conn.recv(self.buffer_size)
                        if not data:
                            break
                        f.write(data)
                print("File received")
```

Lastly, we need a `requirements.txt` file to list the dependencies, although for this simple example, we are using only the Python standard library, so the file will be empty.

requirements.txt
```
# No dependencies required for this simple file transfer application
```

This concludes a fully working implementation.