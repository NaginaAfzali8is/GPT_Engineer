Given the task, we will develop a simple backend service in Python that could serve as the server-side component for a mobile application to track real-time device locations. The mobile application itself would be developed using a framework like React Native or Flutter, but since the task is to write code, we will focus on the backend part which can be written in Python.

The backend will consist of a RESTful API that allows mobile devices to register themselves and send their location updates. The core classes and functions will include:

- `Device`: A class to represent a registered device.
- `Location`: A class to represent a location update from a device.
- `DeviceManager`: A class to handle device registration and management.
- `LocationManager`: A class to handle location updates and retrieval.
- `app`: The Flask application that will serve as the entry point for the API.

We will use Flask as the web framework and SQLAlchemy as the ORM for database interactions.

Let's start with the entry point file:

app.py
```
from flask import Flask, jsonify, request
from flask_sqlalchemy import SQLAlchemy
from device_manager import DeviceManager
from location_manager import LocationManager

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///devices.db'
db = SQLAlchemy(app)

device_manager = DeviceManager(db)
location_manager = LocationManager(db)

@app.route('/register', methods=['POST'])
def register_device():
    content = request.json
    device_id = content.get('device_id')
    if device_manager.register_device(device_id):
        return jsonify({'status': 'success'}), 201
    else:
        return jsonify({'status': 'error', 'message': 'Device already registered'}), 400

@app.route('/update_location', methods=['POST'])
def update_location():
    content = request.json
    device_id = content.get('device_id')
    latitude = content.get('latitude')
    longitude = content.get('longitude')
    if location_manager.update_location(device_id, latitude, longitude):
        return jsonify({'status': 'success'}), 200
    else:
        return jsonify({'status': 'error', 'message': 'Device not registered'}), 400

if __name__ == '__main__':
    db.create_all()
    app.run(debug=True)
```

Next, we will define the `Device` and `Location` models:

models/device.py
```
from app import db

class Device(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    device_id = db.Column(db.String(80), unique=True, nullable=False)

    def __repr__(self):
        return '<Device %r>' % self.device_id
```

models/location.py
```
from app import db
from datetime import datetime

class Location(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    device_id = db.Column(db.String(80), db.ForeignKey('device.device_id'), nullable=False)
    latitude = db.Column(db.Float, nullable=False)
    longitude = db.Column(db.Float, nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)

    def __repr__(self):
        return '<Location %r %r %r>' % (self.device_id, self.latitude, self.longitude)
```

Now, we will implement the `DeviceManager` and `LocationManager` classes:

device_manager.py
```
from models.device import Device

class DeviceManager:
    def __init__(self, db):
        self.db = db

    def register_device(self, device_id):
        if Device.query.filter_by(device_id=device_id).first() is None:
            new_device = Device(device_id=device_id)
            self.db.session.add(new_device)
            self.db.session.commit()
            return True
        return False
```

location_manager.py
```
from models.device import Device
from models.location import Location

class LocationManager:
    def __init__(self, db):
        self.db = db

    def update_location(self, device_id, latitude, longitude):
        device = Device.query.filter_by(device_id=device_id).first()
        if device:
            new_location = Location(device_id=device_id, latitude=latitude, longitude=longitude)
            self.db.session.add(new_location)
            self.db.session.commit()
            return True
        return False
```

Finally, we need a `requirements.txt` file to specify the Python package dependencies:

requirements.txt
```
Flask==2.0.2
Flask-SQLAlchemy==2.5.1
```

To run this backend service, you would need to install the dependencies listed in `requirements.txt` using `pip install -r requirements.txt` and then start the Flask application by running `python app.py`.

Please note that this is a very basic implementation and lacks many features and considerations necessary for a production-ready application, such as authentication, error handling, input validation, unit tests, database migrations, and more.

This concludes a fully working implementation of the backend service for a device location tracking application.