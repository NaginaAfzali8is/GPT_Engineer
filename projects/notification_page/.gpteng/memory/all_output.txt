To create a notification system in Python, we will need several components. Here's a list of core classes and functions, along with a brief comment on their purpose:

- `Notification`: A data class to represent a notification.
- `Notifier`: An interface for sending notifications.
- `EmailNotifier`: A class that implements the `Notifier` interface to send notifications via email.
- `SMSNotifier`: A class that implements the `Notifier` interface to send notifications via SMS.
- `NotificationService`: A service class that manages the sending of notifications through different notifiers.
- `main.py`: The entry point of the application where the notification service is used.

Let's start by creating the `Notification` data class.

notification/notification.py
```python
from dataclasses import dataclass

@dataclass
class Notification:
    """
    Represents a notification with a message and recipient details.
    """
    recipient: str
    message: str
```

Next, we'll define the `Notifier` interface.

notification/notifier.py
```python
from abc import ABC, abstractmethod
from notification.notification import Notification

class Notifier(ABC):
    """
    Interface for sending notifications.
    """
    
    @abstractmethod
    def send(self, notification: Notification) -> None:
        """
        Send a notification to the recipient.
        """
        pass
```

Now, we'll implement the `EmailNotifier` class.

notification/email_notifier.py
```python
from notification.notifier import Notifier
from notification.notification import Notification

class EmailNotifier(Notifier):
    """
    Sends notifications via email.
    """
    
    def send(self, notification: Notification) -> None:
        # Here you would integrate with an email service provider
        print(f"Sending email to {notification.recipient}: {notification.message}")
```

Similarly, we'll implement the `SMSNotifier` class.

notification/sms_notifier.py
```python
from notification.notifier import Notifier
from notification.notification import Notification

class SMSNotifier(Notifier):
    """
    Sends notifications via SMS.
    """
    
    def send(self, notification: Notification) -> None:
        # Here you would integrate with an SMS service provider
        print(f"Sending SMS to {notification.recipient}: {notification.message}")
```

Now, let's create the `NotificationService` class.

notification/notification_service.py
```python
from typing import List
from notification.notifier import Notifier
from notification.notification import Notification

class NotificationService:
    """
    Manages sending notifications through different notifiers.
    """
    
    def __init__(self, notifiers: List[Notifier]):
        self.notifiers = notifiers
    
    def send_all(self, notification: Notification) -> None:
        """
        Send the notification through all configured notifiers.
        """
        for notifier in self.notifiers:
            notifier.send(notification)
```

Finally, we'll create the entry point of the application.

main.py
```python
from notification.notification import Notification
from notification.email_notifier import EmailNotifier
from notification.sms_notifier import SMSNotifier
from notification.notification_service import NotificationService

def main():
    # Create a notification
    notification = Notification(recipient="user@example.com", message="Hello, this is a test notification.")
    
    # Create notifiers
    email_notifier = EmailNotifier()
    sms_notifier = SMSNotifier()
    
    # Create notification service with the list of notifiers
    notification_service = NotificationService([email_notifier, sms_notifier])
    
    # Send the notification through all notifiers
    notification_service.send_all(notification)

if __name__ == "__main__":
    main()
```

Lastly, we need to create a `requirements.txt` file to list the dependencies, which in this case are minimal as we are using standard library modules.

requirements.txt
```
# No external dependencies required
```

This concludes a fully working implementation.